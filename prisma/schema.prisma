// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  encryptedPassword String
  firstName         String
  lastName          String
  characters        PlayerCharacter[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Party             Party[]
}

model PlayerCharacter {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  character        Character          @relation(fields: [characterId], references: [id])
  characterId      String
  User             User?              @relation(fields: [userId], references: [id])
  userId           String?
  PlayersOnParties PlayersOnParties[]
}

model Character {
  id              String            @id @default(uuid())
  version         String
  name            String
  race            String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PlayerCharacter PlayerCharacter[]
  CharacterSkill  CharacterSkill[]
  CharacterCard   CharacterCard[]
  CharacterRole   CharacterRole[]
  CharacterPower  CharacterPower[]
}

model CharacterPower {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  code         String
  slots        Int              @default(0)
  initialValue String           @default("")
  innate       Boolean          @default(false)
  Character    Character        @relation(fields: [characterId], references: [id])
  characterId  String
  parentId     String?
  parentPower  CharacterPower?  @relation("ParentPowers", fields: [parentId], references: [id])
  childPowers  CharacterPower[] @relation("ParentPowers")
}

model CharacterSkill {
  id          String    @id @default(uuid())
  code        String
  slots       Int
  die         Int?
  baseSkill   String?
  plus        Int       @default(0)
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CharacterCard {
  id          String    @id @default(uuid())
  cardType    String
  value       Int
  slots       Int
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CharacterRole {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  code               String
  character          Character            @relation(fields: [characterId], references: [id])
  characterId        String
  CharacterRolePower CharacterRolePower[]
}

model CharacterRolePower {
  id              String               @id @default(uuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  code            String
  slots           Int?                 @default(0)
  initialValue    String?              @default("")
  innate          Boolean?             @default(false)
  CharacterRole   CharacterRole        @relation(fields: [characterRoleId], references: [id])
  characterRoleId String
  parentId        String?
  parentPower     CharacterRolePower?  @relation("ParentPowers", fields: [parentId], references: [id])
  childPowers     CharacterRolePower[] @relation("ParentPowers")
}

model Party {
  id               String             @id @default(uuid())
  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          String
  name             String
  PlayersOnParties PlayersOnParties[]
}

model PlayersOnParties {
  id                String          @id @default(uuid())
  playerCharacter   PlayerCharacter @relation(fields: [playerCharacterId], references: [id])
  playerCharacterId String
  party             Party           @relation(fields: [partyId], references: [id])
  partyId           String
}
